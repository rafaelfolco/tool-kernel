#!/bin/bash
# -*- mode: sh; indent-tabs-mode: nil; sh-basic-offset: 4 -*-
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 filetype=bash

exec >kerneltools-start-stderrout.txt
exec 2>&1

echo "args:"
for i in "$@"; do
    printf "[%s]\n" "$i"
done
echo
echo "pwd: `/bin/pwd`"
echo
echo "hostname: `hostname`"
echo
echo "mount:"
mount
echo
# defaults
subtools="turbostat" # subtools that will be used, any combination of: turbostat,perf,speed-select-util,trace-cmd,sysfs-trace <no-spaces>
interval=10
record_opts=""
base_freq=""
core_power=""
turbo_freq=""
trace_cmd_record_opts=""
sysfs_trace_setup_cmds=()

echo "Processing arguments"
longopts="subtools:,record-opts:,interval:,base-freq:,turbo-freq:,core-power:,trace-cmd-record-opts:,sysfs-trace-setup:,sysfs-trace-cleanup:"
opts=$(getopt -q -o "" --longoptions "$longopts" -n "getopt.sh" -- "$@");
eval set -- "$opts";
while true; do
    arg="$1"
    shift
    val="$1"
    shift
    printf "arg: [%s]  val: [%s]\n" "$arg" "$val"
    case "$arg" in
        --sysfs-trace-cleanup)
            ;;
        --sysfs-trace-setup)
            sysfs_trace_setup_cmds+=("$val")
            echo "appending '$val' to sysfs_trace_setup_cmds"
            ;;
        --subtools)
            subtools=$val
            echo "setting subtools=$subtools"
            ;;
        --record-opts)
            record_opts=$val
            echo "setting record_opts=$record_opts"
            ;;
        --base-freq)
            base_freq=$val
            echo "setting base_freq=$base_freq"
            ;;
        --core-power)
            core_power=$val
            echo "setting core_power=$core_power"
            ;;
        --turbo-freq)
            turbo_freq=$val
            echo "setting turbo_freq=$turbo_freq"
            ;;
        --interval)
            interval=$val
            echo "setting turbo_freq=$turbo_freq"
            ;;
        --trace-cmd-record-opts)
            trace_cmd_record_opts=$val
            echo "setting trace_cmd_record_opts=$trace_cmd_record_opts"
            ;;
        --)
            break
            ;;
        *)
            echo "Invalid option: $arg"
            exit 1
    esac
done

/bin/rm -f kerneltools-pids.txt
for subtool in `echo $subtools | sed -e 's/,/ /g'`; do
    case "$subtool" in
        perf)
            echo "Starting perf record"
            mkdir -p ~/.debug
            cmd="/usr/bin/perf record -a $record_opts"
            time=$(date -u --date="$(TZ=UTC uptime -s)" +%s)
            echo "uptime as seconds since epoch: $time"
            echo "Going to run $cmd"
            $cmd &
            perf_pid=$!
            echo "perf pid is $perf_pid"
            echo "$perf_pid" >>kerneltools-pids.txt
            ;;
        turbostat)
            echo "Starting turbostat"
            nohup /usr/bin/turbostat -d -d -i $interval -o turbostat-stdout.txt  2>turbostat-stderr.txt &
            turbo_pid=$!
            echo "turbostat pid is $turbo_pid"
            echo "$turbo_pid" >>kerneltools-pids.txt
            ;;
        intel-speed-select)
            echo "invoking intel-speed-select"
            # get the settings before we change anything
            /usr/bin/intel-speed-select perf-profile info -l 0 |& grep speed-select|grep ":"|sort|uniq >settings.txt
            if [ ! -z "$base_freq" ]; then
                if [ "$base_freq" == "enable" ]; then
                    echo "running: /usr/bin/intel-speed-select base-freq enable -a"
                    /usr/bin/intel-speed-select base-freq enable -a
                elif [ "$base_freq" == "disable" ]; then
                    echo "running: /usr/bin/intel-speed-select base-freq disable -a"
                    /usr/bin/intel-speed-select base-freq disable -a
                else
                    echo "The value for argument --base-freq [$base_freq] is not supported"
                fi
            fi
            if [ ! -z "$core_power" ]; then
                if [ "$core_power" == "enable" ]; then
                    echo "running: /usr/bin/intel-speed-select core-power enable -a"
                    /usr/bin/intel-speed-select core-power enable -a
                elif [ "$core_power" == "disable" ]; then
                    echo "running: /usr/bin/intel-speed-select core-power disable -a"
                    /usr/bin/intel-speed-select core-power disable -a
                else
                    echo "The value for argument --core-power [$core_power] is not supported"
                fi
            fi
            if [ ! -z "$turbo_freq" ]; then
                if [ "$turbo_freq" == "enable" ]; then
                    echo "running: /usr/bin/intel-speed-select turbo-freq enable -a"
                    /usr/bin/intel-speed-select turbo-freq enable -a
                elif [ "$turbo_freq" == "disable" ]; then
                    echo "running: /usr/bin/intel-speed-select turbo-freq disable -a"
                    /usr/bin/intel-speed-select turbo-freq disable -a
                else
                    echo "The value for argument --turbo-freq [$turbo_freq] is not supported"
                fi
            fi
            for i in info get-lock-status get-config-levels get-config-version get-config-enabled get-config-current-level; do
                /usr/bin/intel-speed-select perf-profile $i >perf-profile_$i.txt 2>&1
            done
            ;;
        trace-cmd)
            echo "Starting trace-cmd"
            echo "Available trace-cmd tracers:"
            /usr/local/bin/trace-cmd list -t
            echo "Starting function trace with functions: $trace_cmd_functions"
            cmd="/usr/local/bin/trace-cmd record --date"
            cmd+=" $trace_cmd_record_opts"
            echo "Going to run:"
            echo "$cmd"
            $cmd &
            trace_pid=$!
            echo "trace-cmd pid is $trace_pid"
            echo "$trace_pid" >>kerneltools-pids.txt
            ;;
        sysfs-trace)
            echo "Making sure debugfs is mounted"
            mount --verbose --type debugfs none /sys/kernel/debug

            echo "Configuring sysfs-trace"

            if pushd /sys/kernel/debug/tracing > /dev/null; then
                echo "Making sure tracing is really off"
                echo 0 > tracing_on

                echo "Clearing existing trace buffers"
                echo > trace

                echo "Executing sysfs-trace-setup commands:"
                for val in "${sysfs_trace_setup_cmds[@]}"; do
                    echo "Running '${val}'"
                    eval ${val}
                    RC=$?
                    if [ "${RC}" != "0" ]; then
                        echo "ERROR: Command returned '${RC}'"
                        exit ${RC}
                    fi
                done

                popd > /dev/null
            else
                echo "ERROR: Is tracing enabled?"
                exit 1
            fi

            touch kerneltools-pids.txt
            ;;
        rt-trace-bpf)
            echo "Starting rt-trace-bpf"
            nohup python3 /root/rt-trace-bcc.py -c ${WORLOAD_CPUS} -b -s > rt-trace-bpf-stdout.txt 2>rt-trace-bpf-stderr.txt &
            rt_trace_pid=$!
            echo "rt-trace-bpf pid is $rt_trace_pid"
            echo "$rt_trace_pid" >>kerneltools-pids.txt
            ;;
       *)
            echo "Invalid subtool: $subtool"
            ;;
    esac
done
